2.1 SELECT

Task – Select all records from the Employee table.

	select * from public.employees;

Task – Select all records from the Employee table where last name is King.

	select * from public.employees where last_name = 'King';

Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.

	select * from public.employees where first_name = 'Andrew' and reports_to is null;

2.2 ORDER BY

Task – Select all albums in Album table and sort result set in descending order by title.

	select * from public.albums order by title desc;


Task – Select first name from Customer and sort result set in ascending order by city

	select first_name from public.customers order by city asc;


2.3 INSERT INTO

Task – Insert two new records into Genre table

	INSERT INTO public.genres (id, name) VALUES (26, 'Hairbands'),
  	(27, 'New Wave of British Heavy Metal');

Task – Insert two new records into Employee table

	INSERT INTO employees (id, last_name, first_name, title, reports_to,
            birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email)
			VALUES (9, 'Smith', 'Fred', 'VP', NULL, TIMESTAMP '1962-02-18 00:00:00',
           TIMESTAMP'1962-02-18 00:00:00',
           '1313 Mockingbird Lane', 'Richmond', 'VA','USA',
        	12345,'800-123-1234', '800-123-4567', 'abc@gmail.com');


	INSERT INTO employees (id, last_name, first_name, title, reports_to,
            birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email)
			VALUES (9, 'Jones', 'Alice', 'MVP', NULL, TIMESTAMP '1962-02-18 00:00:00',
           TIMESTAMP'1962-02-18 00:00:00',
           '704 Hauser Street', 'Richmond', 'VA','USA',
        	12345,'800-123-1234', '800-123-4567', 'abc@gmail.com');

Task – Insert two new records into Customer table

	INSERT INTO customers (id, first_name, last_name, company, address, city, state, postal_code, email)
		VALUES (60, 'Roger', 'Dodger', 'Capital One', '21B Baker Street',
        'London Town', 'VA', 14354, 'annoying@gmail.com');

	INSERT INTO customers (id, first_name, last_name, company, address, city, state, postal_code, email)
		VALUES (61, 'Kelley', 'Schpelly', 'Capital One', '21B Baker Street',
        'London Town', 'VA', 14354, 'reallyannoying@gmail.com');
        
        
2.4 UPDATE

Task – Update Aaron Mitchell in Customer table to Robert Walter

        Update customers set first_name = 'Robert', last_name = 'Mitchell'
		where first_name = 'Aaron' and last_name = 'Mitchell';


Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”

	UPDATE artists set name = 'CCR'
	WHERE name = 'Creedence Clearwater Revival';
	
2.5 LIKE

Task – Select all invoices with a billing address like “T%”

	SELECT id from invoices where billing_address like 'T%';

2.6 BETWEEN

Task – Select all invoices that have a total between 15 and 50

	select id from invoices where total BETWEEN 15 and 50;


Task – Select all employees hired between 1st of June 2003 and 1st of March 2004

	SELECT * FROM employees where hire_date BETWEEN TIMESTAMP '2003-6-1' and TIMESTAMP '2004-3-1'
	
2.7 DELETE

Task – Delete a record in Customer table where the name is Robert Walter 
(There may be constraints that rely on this, find out how to resolve them).

	BEGIN;

	Delete from invoice_lines where invoice_id in (select id from invoices where customer_id =
	(SELECT id from customers where first_name = 'Robert' and last_name = 'Mitchell'));

	delete  from invoices where customer_id =
	(SELECT id from customers where first_name = 'Robert' and last_name = 'Mitchell');

	Delete from customers where first_name = 'Robert' and last_name = 'Mitchell';

	COMMIT;
	
3.1 System Defined Functions

Task – Create a function that returns the current time.

	
	create or REPLACE FUNCTION mytime()
    RETURNS timestamp WITH TIME ZONE as $$
    SELECT now();
    $$ LANGUAGE sql;

Task – create a function that returns the length of a mediatype from the mediatype table	
	
	create or REPLACE FUNCTION medialegth(in int)
    RETURNS int as $$
	SELECT length(media_types.name) from media_types
	where media_types.id = $1
	$$ LANGUAGE sql;

	
	
	
	7.1 INNER

Task – Create an inner join that joins customers and orders and specifies the name of the 
customer and the invoiceId.

	SELECT customers.last_name, invoices.id from customers INNER JOIN invoices on
	customers.id = invoices.customer_id ORDER BY customers.id, invoices.id

7.2 OUTER

	Task – Create an outer join that joins the customer and invoice table, 
	specifying the CustomerId, firstname, lastname, invoiceId, and total.
	
		SELECT i.customer_id, c.first_name, c.last_name, i.id, i.total
		from customers c FULL OUTER JOIN invoices i
		on c.id = i.customer_id ORDER BY c.id, i.id
		
7.3 RIGHT

Task – Create a right join that joins album and artist specifying artist name and title.

	SELECT art.name, alb.title from artists art RIGHT JOIN albums alb
  	on art.id = alb.artist_id;
  	
7.4 CROSS

Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.

	SELECT art.name, alb.title from artists art CROSS JOIN  albums alb
    order by art.name ASC
    
7.5 SELF

Task – Perform a self-join on the employee table, joining on the reportsto column.

	select e.last_name as employee, b.last_name as manager
	from employees e, employees b
	where e.reports_to = b.id